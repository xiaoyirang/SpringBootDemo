<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.community.mapper.FeeMapper">
  <resultMap id="BaseResultMap" type="com.community.entity.Fee">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="feeName" jdbcType="VARCHAR" property="feename" />
    <result column="price" jdbcType="DECIMAL" property="price" />
    <result column="fixedCost" jdbcType="DECIMAL" property="fixedcost" />
    <result column="costUnit" jdbcType="INTEGER" property="costunit" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createtime" />
    <result column="createUserId" jdbcType="INTEGER" property="createuserid" />
    <result column="createUserName" jdbcType="VARCHAR" property="createusername" />
    <result column="updateUserId" jdbcType="INTEGER" property="updateuserid" />
    <result column="updateUserName" jdbcType="VARCHAR" property="updateusername" />
    <result column="updateTime" jdbcType="TIMESTAMP" property="updatetime" />
    <result column="status" jdbcType="INTEGER" property="status" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, feeName, price, fixedCost, costUnit, createTime, createUserId, createUserName, 
    updateUserId, updateUserName, updateTime, status
  </sql>
  <select id="selectByExample" parameterType="com.community.entity.FeeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from fee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from fee
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from fee
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.community.entity.FeeExample">
    delete from fee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.community.entity.Fee">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into fee (feeName, price, fixedCost, 
      costUnit, createTime, createUserId, 
      createUserName, updateUserId, updateUserName, 
      updateTime, status)
    values (#{feename,jdbcType=VARCHAR}, #{price,jdbcType=DECIMAL}, #{fixedcost,jdbcType=DECIMAL}, 
      #{costunit,jdbcType=INTEGER}, #{createtime,jdbcType=TIMESTAMP}, #{createuserid,jdbcType=INTEGER}, 
      #{createusername,jdbcType=VARCHAR}, #{updateuserid,jdbcType=INTEGER}, #{updateusername,jdbcType=VARCHAR}, 
      #{updatetime,jdbcType=TIMESTAMP}, #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.community.entity.Fee">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into fee
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="feename != null">
        feeName,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="fixedcost != null">
        fixedCost,
      </if>
      <if test="costunit != null">
        costUnit,
      </if>
      <if test="createtime != null">
        createTime,
      </if>
      <if test="createuserid != null">
        createUserId,
      </if>
      <if test="createusername != null">
        createUserName,
      </if>
      <if test="updateuserid != null">
        updateUserId,
      </if>
      <if test="updateusername != null">
        updateUserName,
      </if>
      <if test="updatetime != null">
        updateTime,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="feename != null">
        #{feename,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="fixedcost != null">
        #{fixedcost,jdbcType=DECIMAL},
      </if>
      <if test="costunit != null">
        #{costunit,jdbcType=INTEGER},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="createuserid != null">
        #{createuserid,jdbcType=INTEGER},
      </if>
      <if test="createusername != null">
        #{createusername,jdbcType=VARCHAR},
      </if>
      <if test="updateuserid != null">
        #{updateuserid,jdbcType=INTEGER},
      </if>
      <if test="updateusername != null">
        #{updateusername,jdbcType=VARCHAR},
      </if>
      <if test="updatetime != null">
        #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.community.entity.FeeExample" resultType="java.lang.Long">
    select count(*) from fee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update fee
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.feename != null">
        feeName = #{record.feename,jdbcType=VARCHAR},
      </if>
      <if test="record.price != null">
        price = #{record.price,jdbcType=DECIMAL},
      </if>
      <if test="record.fixedcost != null">
        fixedCost = #{record.fixedcost,jdbcType=DECIMAL},
      </if>
      <if test="record.costunit != null">
        costUnit = #{record.costunit,jdbcType=INTEGER},
      </if>
      <if test="record.createtime != null">
        createTime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createuserid != null">
        createUserId = #{record.createuserid,jdbcType=INTEGER},
      </if>
      <if test="record.createusername != null">
        createUserName = #{record.createusername,jdbcType=VARCHAR},
      </if>
      <if test="record.updateuserid != null">
        updateUserId = #{record.updateuserid,jdbcType=INTEGER},
      </if>
      <if test="record.updateusername != null">
        updateUserName = #{record.updateusername,jdbcType=VARCHAR},
      </if>
      <if test="record.updatetime != null">
        updateTime = #{record.updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update fee
    set id = #{record.id,jdbcType=INTEGER},
      feeName = #{record.feename,jdbcType=VARCHAR},
      price = #{record.price,jdbcType=DECIMAL},
      fixedCost = #{record.fixedcost,jdbcType=DECIMAL},
      costUnit = #{record.costunit,jdbcType=INTEGER},
      createTime = #{record.createtime,jdbcType=TIMESTAMP},
      createUserId = #{record.createuserid,jdbcType=INTEGER},
      createUserName = #{record.createusername,jdbcType=VARCHAR},
      updateUserId = #{record.updateuserid,jdbcType=INTEGER},
      updateUserName = #{record.updateusername,jdbcType=VARCHAR},
      updateTime = #{record.updatetime,jdbcType=TIMESTAMP},
      status = #{record.status,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.community.entity.Fee">
    update fee
    <set>
      <if test="feename != null">
        feeName = #{feename,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=DECIMAL},
      </if>
      <if test="fixedcost != null">
        fixedCost = #{fixedcost,jdbcType=DECIMAL},
      </if>
      <if test="costunit != null">
        costUnit = #{costunit,jdbcType=INTEGER},
      </if>
      <if test="createtime != null">
        createTime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="createuserid != null">
        createUserId = #{createuserid,jdbcType=INTEGER},
      </if>
      <if test="createusername != null">
        createUserName = #{createusername,jdbcType=VARCHAR},
      </if>
      <if test="updateuserid != null">
        updateUserId = #{updateuserid,jdbcType=INTEGER},
      </if>
      <if test="updateusername != null">
        updateUserName = #{updateusername,jdbcType=VARCHAR},
      </if>
      <if test="updatetime != null">
        updateTime = #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.community.entity.Fee">
    update fee
    set feeName = #{feename,jdbcType=VARCHAR},
      price = #{price,jdbcType=DECIMAL},
      fixedCost = #{fixedcost,jdbcType=DECIMAL},
      costUnit = #{costunit,jdbcType=INTEGER},
      createTime = #{createtime,jdbcType=TIMESTAMP},
      createUserId = #{createuserid,jdbcType=INTEGER},
      createUserName = #{createusername,jdbcType=VARCHAR},
      updateUserId = #{updateuserid,jdbcType=INTEGER},
      updateUserName = #{updateusername,jdbcType=VARCHAR},
      updateTime = #{updatetime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>